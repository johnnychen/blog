<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Johnny&#39;s Blog</title>
  
  <subtitle>World is open for you to enjoy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://johnnychen.cc/"/>
  <updated>2017-12-10T06:44:43.000Z</updated>
  <id>http://johnnychen.cc/</id>
  
  <author>
    <name>始信</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前后端分离的概念和展望</title>
    <link href="http://johnnychen.cc//blog/2017/f2e-b2e-border/"/>
    <id>http://johnnychen.cc//blog/2017/f2e-b2e-border/</id>
    <published>2017-12-10T05:58:26.000Z</published>
    <updated>2017-12-10T06:44:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>前后端分离优劣的讨论很多，可以参见知乎<a href="https://www.zhihu.com/question/28207685" target="_blank" rel="noopener">Web 前后端分离的意义大吗？</a> </p><p>我们今天回顾一下前后端分离的概念，展望下未来的发展</p><blockquote><p>如果没有明确说明，这里的前后端分离指的都是人层面/工种上的前后端分离。</p></blockquote><h2 id="问题起源与两个战场"><a href="#问题起源与两个战场" class="headerlink" title="问题起源与两个战场"></a>问题起源与两个战场</h2><p>前端工种刚出现时，<code>web研发模式</code>非常老，没有前端模板的概念，html均以后端模板的方式放在服务端(jsp/php)。</p><p>js/css是前端的职责，但是服务端html(模板)是谁的职责却一直剪不断理还乱，不同的公司，不同的团队表现不一。html(模板)直接影响页面展现，所以认为是前端的范畴；但在源码管理和部署层面，又存在与服务端，且有一定的业务逻辑耦合，所以说是后端的范畴也不为过。</p><p>随着<code>web研发模式</code>的发展，前端模板的使用越来越广泛，尤其到mvvm时代，后端模板几近消亡，在技术上为前后端分离提供了基础。前后端分离的概念也就雨后春笋的冒出来了，基本上狭义的前后端分离可以理解为后端模板的消亡史。</p><p>上述前后端分离是主战场，主要技术推动，是最广为熟知和认可的前后端分离。除此之外，还有一个分战场，基于nodejs的前后端分离，推动的因素主要是前端整体能力的提升、个人空间的发展、对业务理解和话语权的把握上。</p><p>两个战场合在一起，构成了完整前后端分离的概念。在这个概念下，都需要前端研发人员和后端研发人员才能共同支持业务的研发诉求。</p><h2 id="服务端模板时代"><a href="#服务端模板时代" class="headerlink" title="服务端模板时代"></a>服务端模板时代</h2><p>非前后端分离的时代，等同于服务端模板的时代。服务端模板因为耦合了展现逻辑和业务逻辑，导致无法明确职责，非常影响项目协同。很少团队明确约定，后端模板应该属于前端团队负责还是后端团队负责，具体项目协作中，这部分工作的划分也基本变成了一个艺术性的工作，非常考验项目经理的把控能力。</p><p>带来两个非常大的缺点,  因为前后端两拨人在同一载体上分别维护业务逻辑和展现逻辑，导致模板这一载体本身的逻辑说不清楚，时间久了，业务复杂了，维护性非常差。另外一个缺点是 ，职责不清导致的协同成本高昂，甚至出现踢皮球现象。</p><p>针对上述问题，后端的态度主要是甩锅，想避而不谈，很少提出解决方案；前端因为职业空间的缘故，毅然肩负起解决这个问题的责任。解决的思路分两派，一派是服务端模板客户端化，另外一派寻求服务端的解决方案。</p><p>关于服务端的解决方案，分为改良派和改革派，最后改革派存活下来了。改良派虽然失败了，但历史上的贡献不应该被抹去，简单分享下。</p><p>服务端的改良方案指在是在现有技术体系不变下，引入服务端mock/api层，使得前后端同学可以分别独立开发，其中服务端模板职责明确为前端所有。</p><p>改良派失败的原因是方案过于复杂，因为mock/api层需要完整模拟所有服务端模板的逻辑，而且这个过程与特别服务端语言/模板引擎耦合，很难推广和产品化；另外 ，前端开发时需要单独运行mock服务器；最后，腹背受敌，在纯粹的客户端分离和基于nodejs的前后端分离的夹击下，生存空间有限。</p><h2 id="主战场-基于浏览器端的前后端分离"><a href="#主战场-基于浏览器端的前后端分离" class="headerlink" title="主战场 - 基于浏览器端的前后端分离"></a>主战场 - 基于浏览器端的前后端分离</h2><p>客户端模板化技术是随着RIA富Web应用的发展而发展，起初仅仅是局部采用客户端模板，后来整个页面都采用，最后把页面路由也搬到了客户端。整个网站变成了一个SPA单页面应用，展现逻辑写死在前端模板中，通过Restful接口获取业务数据实现业务逻辑的处理。</p><p>目前主流的React, Vue, Angular前端web框架均提供标准的SPA解决方案，MVVM成为标准的框架设计模式。</p><p>不过，SPA依旧依赖一个html容器，此容器必须存放在应用服务器端，不能像js/css/img一样托管在静态资源服务器/cdn上，原因主要是域名及访问路径问题，数据跨域访问也有影响。</p><p>关于html容器依赖问题，如果不解决，即把html作为空白模板放在服务端，我们称为<code>传统的前后端分离</code>；如果解决的话，把html也作为静态资源放在前端工程中，我们称为<code>纯粹的前后端分离</code>。</p><p>纯粹的前后端分离，可以让前端完全不依赖后端环境进行研发。但在部署的时候，需要将html与其他js/css/img资源分开打包部署，html部署在nginx中并做相应配置，js/css/img托管在静态资源服务器/cdn中。</p><p>另外，为了解决纯粹前后端分离SEO不友好的问题，践行了服务端同构渲染方案，这里就不赘述了。</p><h2 id="分战场-基于nodejs的前后端分离"><a href="#分战场-基于nodejs的前后端分离" class="headerlink" title="分战场 - 基于nodejs的前后端分离"></a>分战场 - 基于nodejs的前后端分离</h2><p>基于nodejs的前后端分离，除了nodejs本身技术的成熟外，建立在几个背景下：</p><ul><li>服务端本身service化</li><li>后端不愿意承担模板的工作，想丢给前端</li><li>前端愿意承担更多工作，除了服务端模板外 ，整个web层有意愿也有能力承接</li></ul><p>基于nodejs的前后端分离显然解决了服务端模板职责不清以及带来的相关问题，但同时走向了另外一个极端，把服务端路由、认证、权限、数据拼装和转换等web层的一系列工作都纳入到前端的范畴内。</p><p>但从技术架构来看，nodejs的引入不破坏后端本身技术架构体系，同时解决了服务端模板职责的问题，另外将web层统一交给前端，在多端复用、性能优化等场景也有了更大的发挥空间。但有个很大的非技术缺陷是，在时代背景下面，前端资源严重不足，将web层交给前端或许在项目协同及开发效率是有提升，但资源不足的先天劣势是很残酷的现实。另外，nodejs在技术上属于后端开发的范畴，对应的研发体系和配套措施成本也是需要考虑的。</p><h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><p>前后端分离是具有中国特色和时代背景的，国外不存在所谓的前后端分离，国内的前后端分离更多的是时代背景下的产物。在中国互联网高速发展，对研发人员的大量需求与供给之间严重不足之间的矛盾背景下，只能通过降低对研发人员的要求，通过组织、协作、分工的手段来解决高水平研发人力资源不足问题。</p><p>随着程序员群体的成长，高水平人才的不断涌入，以及技术本身的发展及门槛的降低，web研发将会回到面向业务思考的全栈研发模式上，前后端分离的概念将会消亡，如果 有，也只会存在与特定场景。</p><p>基于人的/协作的前后端分离将会消亡，但基于技术的前后端分离将会永存。采用了nodejs的研发团队, html模板同样会放在浏览器端。技术的前后端分离是软件工程中分层思想的体现，不会因为人的缘故产生异同。</p><p>未来后端开发必定会有nodejs的一片战场，因为同种语言，相同模块管理，相似工程化手段的天然优势是其他语言难以望其项背的，而且这个战场不是在企业级应用，而是在消费者场景，快速迭代，快速试错，快速拿结果的场景。另外，企业级应用场景中的后端不能继续想着有前端帮你写页面，双方定义前后端接口了，学会运用企业级应用的前端解决方案，自己构建页面，快速响应业务才是核心。</p><p>最后，大浪淘沙后，时代背景的，人为的终将被淘汰；符合软件工程思想的，面向业务架构的终将留存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前后端分离优劣的讨论很多，可以参见知乎&lt;a href=&quot;https://www.zhihu.com/question/28207685&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web 前后端分离的意义大吗？&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;我们今天回顾一下前
      
    
    </summary>
    
      <category term="总结" scheme="http://johnnychen.cc/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="nodejs" scheme="http://johnnychen.cc/tags/nodejs/"/>
    
      <category term="前后端分离" scheme="http://johnnychen.cc/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
      <category term="模板" scheme="http://johnnychen.cc/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="前端" scheme="http://johnnychen.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>HTML及其静态资源时间戳部署</title>
    <link href="http://johnnychen.cc//blog/2017/html-and-its-timesamp/"/>
    <id>http://johnnychen.cc//blog/2017/html-and-its-timesamp/</id>
    <published>2017-12-03T03:32:05.000Z</published>
    <updated>2017-12-10T06:37:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文针对的阅读对象是想系统了解时间戳机制，对应部署机制，尤其是与HTML结合部分的同学，需要对前端运维有一定了解。</p></blockquote><h2 id="关于时间戳"><a href="#关于时间戳" class="headerlink" title="关于时间戳"></a>关于时间戳</h2><p>关于前端资源时间戳问题，知乎上有个经典的回答 <a href="https://www.zhihu.com/question/20790576/answer/32602154" target="_blank" rel="noopener">大公司里怎样开发和部署前端代码</a>，详细讲述了，时间戳问题的起因以及对应2种解决方案：</p><ul><li><code>手动维护时间戳</code></li><li><code>信息摘要时间戳</code></li></ul><p>以及在静态资源部署在cdn情况下<code>覆盖式发布</code>和<code>非覆盖式发布</code></p><p>不过，答案中未对时间戳如何更新到HTML中作详细的介绍，本文主要讲解这个<code>HTML及其时间戳部署</code>问题及解决方案</p><blockquote><p>接下来的讨论，假定用的是<code>信息摘要时间戳</code>以及<code>非覆盖式发布机制</code></p></blockquote><h2 id="关于HTML及其时间戳"><a href="#关于HTML及其时间戳" class="headerlink" title="关于HTML及其时间戳"></a>关于HTML及其时间戳</h2><p>时间戳部署问题，指的是将生成的时间戳更新到对应HTML的资源引用链接当中，当资源内容发生变化后，通过工程化的手段，自动更新对应的时间戳。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://static.xxx.com/a_&#123;timestamp&#125;.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.xxx.com/a_&#123;timestapm&#125;.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面刷新时，用户永远能够访问到最新的文件内容，即通过一种机制让<code>timestamp</code>永远保持最新。</p><h2 id="影响部署方案的三个方面"><a href="#影响部署方案的三个方面" class="headerlink" title="影响部署方案的三个方面"></a>影响部署方案的三个方面</h2><p>不同条件下的部署方案是不同的，主要受 <code>HTML存储在哪里</code>，<code>HTML部署的哪里</code>，<code>解决过程采用编译时还是运行时</code>三方面的影响。</p><h3 id="HTML存储在哪里"><a href="#HTML存储在哪里" class="headerlink" title="HTML存储在哪里"></a>HTML存储在哪里</h3><p>这里的<code>HTML存储的哪里</code>指的是在代码托管上，HTML(也可能是服务端模板)是否与静态资源(js/css/img)在同一个代码仓库中。不关心HTML是否是服务端(java/php/nodejs)模板生成，只要是在同一个代码仓库，文件层面上在一起即可。</p><p>是否在同一代码仓库中非常重要，因为如果是，那么在文件目录结构上HTML与资源具有物理上的关联，那么在生成文件时间戳的同时可以根据关联关系立即更新/部署对应HTML的时间戳；否的话，必须提供一种异步机制，让二者产生关联。</p><ul><li>HTML与静态资源统一管理的场景:<ul><li><code>传统/全栈开发</code>，所有代码均在一起，包括html和静态资源</li><li><code>纯粹的前后端分离</code>，指除了数据/渲染上的前后端分离外，对应的HTML本身也在源码管理及部署层面上与后端应用进行剥离，作为资源交由前端进行管理。</li></ul></li><li>非HTML与静态资源统一管理的场景:<ul><li><code>传统的前后端分离</code>，指对数据/渲染进行前后端分离，但HTML还存在方后端模板中</li></ul></li></ul><p>HTML与静态资源如果不在同一个仓库时，必须建立一个中间存储机制，保存静态资源文件对应的时间戳，然后在HTML编译或运行时环境中，获取并匹配中间存储对应的时间戳进行更新/部署。</p><p>幸运的是，现在主流的研发模式里，越来越推崇<code>全栈</code>或<code>纯粹的前后端分离</code>了，两种方式都极大的简化了时间戳的部署方式。尤其是后者，更加简单，Webpack提供了专门的html插件，自动创建html的同时帮你完成时间戳部署的事情。</p><h3 id="HTML部署的哪里"><a href="#HTML部署的哪里" class="headerlink" title="HTML部署的哪里"></a>HTML部署的哪里</h3><p>在传统开发中，HTML均以服务端模板的方式存在于应用服务器中，通过域名<code>www.xxx.com</code>即可访问。其中，静态资源如果同机部署的话，也可以用www.xxx.com进行访问；如果静态资源分开部署到了oss/cdn中的话，则用要用<code>static.xxx.com</code>访问，但不影响用www.xxx.com访问HTML。</p><p>但在<code>纯粹的前后端分离</code>方案中，如果把HTML当做普通静态资源部署到oss/cdn中的话，就只能通过<code>static.xxx.com/index.html</code>访问到HTML文件，这对用户极其不友好，我们传达给用户的域名应该是<code>www.xxx.com</code>；另外，也无法做不同路径url映射同一个html的功能(browserHistory)。所以需要对这种情况下的HTML部署做特殊处理。</p><p><code>纯粹的前后端分离</code>在部署时，将HTML作为特殊静态资源，单独打包部署到nginx中；其他资源单独部署到oss/cdn中。这个主要影响的是打包和部署策略，跟运维同学沟通清楚即可。</p><p>上述问题只会存在于将普通静态资源单独部署到oss/cdn情况，且采用<code>纯粹的前后端分离</code>方案下，其他情况不存在此问题。但因为<code>纯粹的前后端分离</code>是当下主流的研发模式，且涉及运维层面（前端对运维可能不是特别清楚），因此单独提出来。</p><h3 id="解决过程采用编译时还是运行时"><a href="#解决过程采用编译时还是运行时" class="headerlink" title="解决过程采用编译时还是运行时"></a>解决过程采用编译时还是运行时</h3><blockquote><p>能够预编译解决的问题，尽可能的不要选择运行时，让生产环境保持简单意味着生产环境更加稳定和高效。</p></blockquote><p>代码的上线过程：开发 -&gt; 发布 -&gt; 运行，时间戳的部署可以选择在发布过程中的预编译环节，也可以在运行时解决，优先选择编译时。</p><p>在<code>HTML存储在哪里</code>小节中其实已经讲过了，如果HTML与静态文件在同一仓库，那么预编译时，在生成静态文件时间戳的同时，根据仓库的文件路径关系，找到对应的HTML页面，更新/部署对应的时间戳即可。所以<code>全栈开发</code>, <code>纯粹前后端分离</code>开发的同学尽情享用这种方式把。</p><p>如果HTML与静态文件隶属不同仓库，就麻烦了，那先编译生成静态文件时间戳并存储到中间存储；再编译HTML，与此同时获取刚才中间存储中的最新时间戳；最后更新/部署HTML中的时间戳。不过这里有个<strong>缺点</strong>：<code>编译时序依赖</code>，要求你在发布前，要严格保证发布的顺序，先发布前端仓库，后发布后端。人肉保证比较困难，系统保证感觉有点重，自己权衡把。</p><p><code>运行时</code>动态获取最新时间戳可以解决<code>编译时序依赖</code>问题，但必须通过模板宏及运行时获取中间存储时间戳的机制，增加了生产环境的复杂度。</p><h2 id="常见开发模式下的HTML及其时间戳部署"><a href="#常见开发模式下的HTML及其时间戳部署" class="headerlink" title="常见开发模式下的HTML及其时间戳部署"></a>常见开发模式下的HTML及其时间戳部署</h2><p>前文讲解偏理论，本文看下常见前后端开发模式下的具体案例，假定前端资源基于webpack。</p><h3 id="纯粹前后端分离"><a href="#纯粹前后端分离" class="headerlink" title="纯粹前后端分离"></a>纯粹前后端分离</h3><blockquote><p>此模式下，HTML与静态资源统一存放，部署时假定要求cdn，无视服务端代码是否同一仓库</p></blockquote><ol><li><code>html-webpack-plugin</code>自动生成html</li><li>发布编译环节，运行webpack自动生成<code>dist</code>编译后资源（包括html）</li><li>发布打包环节，将dist中的html单独打包<code>html.zip</code></li><li>发布打包环节，将dist中的静态资源单独打包<code>static.zip</code></li><li>发布打包环节，将服务端代码打包成<code>server.zip</code></li><li>发布部署环节，将<code>html.zip</code>解压缩到nginx静态资源目录，自行配置nginx转发规则</li><li>发布部署环节，将<code>static.zip</code>发布到oss，cdn会自动回源</li><li>发布部署环节，将<code>server.zip</code>进行部署</li></ol><p>step3, step5需要特别关注。</p><h3 id="传统前后端分离（同一仓库）"><a href="#传统前后端分离（同一仓库）" class="headerlink" title="传统前后端分离（同一仓库）"></a>传统前后端分离（同一仓库）</h3><blockquote><p>此模式下，HTML在服务端，服务端与前端代码同一仓库，是否部署cdn无所谓</p></blockquote><ol><li>提前准备好html，并手动维护到服务端view目录下, html中无时间戳</li><li>发布编译环节，运行webpack自动生成<code>dist</code>编译后资源（包括html）</li><li>发布编译环节，根据静态资源与view模板目录关系，自动将dist中的文件时间戳更新到view中的html</li><li>发布打包环节，将dist中的静态资源打包为<code>static.zip</code></li><li>发布打包环节，将服务端代码（含html）打包为<code>server.zip</code></li><li>发布部署环节，将<code>static.zip</code>进行部署</li><li>发布部署环节，将<code>server.zip</code>进行部署</li></ol><p>step3需要特别关注。另外传统开发模式（非前后端分离）下也是此过程。</p><h3 id="传统前后端分离（分开仓库-编译时）"><a href="#传统前后端分离（分开仓库-编译时）" class="headerlink" title="传统前后端分离（分开仓库/编译时）"></a>传统前后端分离（分开仓库/编译时）</h3><blockquote><p>此模式下，HTML在服务端，服务端与前端代码不同仓库，是否部署cdn无所谓</p></blockquote><ol><li>提前准备好html，并手动维护到服务端view目录下, html中无时间戳</li><li>发布编译环节，运行webpack自动生成<code>dist</code>编译后资源（包括html）</li><li>发布编译环节，自动将dist中的文件时间戳存放到<code>timestamp.server</code>中</li><li>发布编译环节，编译后端代码，其中编译html时，从<code>timestamp.server</code>取回最新时间戳，进行编译。</li><li>发布打包环节，将dist中的静态资源打包为<code>static.zip</code></li><li>发布打包环节，将服务端代码（含html）打包为<code>server.zip</code></li><li>发布部署环节，将<code>static.zip</code>进行部署</li><li>发布部署环节，将<code>server.zip</code>进行部署</li></ol><p>step2,3,4需要特被关注，尤其是需要保证编译的顺序</p><h3 id="传统前后端分离（分开仓库-运行时）"><a href="#传统前后端分离（分开仓库-运行时）" class="headerlink" title="传统前后端分离（分开仓库/运行时）"></a>传统前后端分离（分开仓库/运行时）</h3><blockquote><p>此模式下，HTML在服务端，服务端与前端代码不同仓库，是否部署cdn无所谓，运行时方案</p></blockquote><ol><li>提前准备好html，并手动维护到服务端view目录下, html中无时间戳</li><li>发布编译环节，运行webpack自动生成<code>dist</code>编译后资源（包括html）</li><li>发布编译环节，自动将dist中的文件时间戳存放到<code>timestamp.server</code>中</li><li>发布打包环节，将dist中的静态资源打包为<code>static.zip</code></li><li>发布打包环节，将服务端代码（含html）打包为<code>server.zip</code></li><li>发布部署环节，将<code>static.zip</code>进行部署</li><li>发布部署环节，将<code>server.zip</code>进行部署</li><li>运行时，HTML模板宏通过一定机制，实时获取<code>timestamp.server</code>中的最新时间戳，实时编译生成最终html</li></ol><p>step8是关键。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文针对的阅读对象是想系统了解时间戳机制，对应部署机制，尤其是与HTML结合部分的同学，需要对前端运维有一定了解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;关于时间戳&quot;&gt;&lt;a href=&quot;#关于时间戳&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="总结" scheme="http://johnnychen.cc/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="timestamp" scheme="http://johnnychen.cc/tags/timestamp/"/>
    
      <category term="编译" scheme="http://johnnychen.cc/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="运维" scheme="http://johnnychen.cc/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="部署" scheme="http://johnnychen.cc/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="前端" scheme="http://johnnychen.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>How to eliminate the gap between github issues blog and hexo blog</title>
    <link href="http://johnnychen.cc//blog/2017/issues-originated-hexo-blog/"/>
    <id>http://johnnychen.cc//blog/2017/issues-originated-hexo-blog/</id>
    <published>2017-11-26T07:55:13.000Z</published>
    <updated>2017-11-30T05:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何抹平<code>github issues blog</code>和<code>hexo blog</code>的鸿沟呢？指的是既可以拥有自定义的hexo博客，又可以享用github issues的便捷性，且尽可能的只维护其中一份即可。</p><p>自己分别研究了这两种博客机制，并结合gitment插件，设计了以github issues为源且兼顾hexo的一种博客维护方法（暂且叫<code>issues-originated-hexo-blog</code>），最后得到的效果：</p><blockquote><ul><li>只需要维护github issues即可</li><li>提供一种机制，让issues会自动编译并发布到hexo博客中</li><li>hexo可以享用github issues的评论，包括可以在hexo中评论，回源到github issues</li></ul></blockquote><p>一旦建立此机制后，你的日常blog维护方法只需要在维护github issues的基础之上满足两个约束即可：</p><ul><li>github issue的标签的前缀规范，用于定义博文的标签、分类的同时又可以关联两个博客的文章</li><li>手动执行一下命令<code>npm run deploy</code>，让issues的博客发布、同步到hexo中</li></ul><h2 id="关于两种blog和gitment插件"><a href="#关于两种blog和gitment插件" class="headerlink" title="关于两种blog和gitment插件"></a>关于两种blog和gitment插件</h2><p><code>github issues blog</code>和<code>hexo blog</code>都不细说了，github issues没有任何技术门门槛，hexo还是要研究实践一番才可以，但只要花点时间学习，还是很简单的，可以参见：<a href="http://www.jianshu.com/p/834d7cc0668d" target="_blank" rel="noopener">我的博客是如何搭建的（github pages + HEXO + 域名绑定）</a>。</p><p>其中，我们这里的<code>hexo blog</code>在部署环节特指通过github pages的方式，主要是既简单又使用。</p><p>另外，gitment插件是一个基于github issues,利用github 开放apis设计的一款创意第三方评论系统。既然可以把issue评论作为评论系统，那为何不更近一步，把issue本身当成博客呢？这是<code>issues-originated-hexo-blog</code>的核心理念。</p><h2 id="设计结构"><a href="#设计结构" class="headerlink" title="设计结构"></a>设计结构</h2><ol><li><code>issue本身</code>作为博文主体(包括标题和内容), <code>issue评论</code>作为博文评论，通过<code>github issues tags</code>作为博文的标签和分类</li><li>通过一个特殊的<code>github issue tag</code>来标识博文的<code>unique name</code>，此name两个作用<ul><li>是<code>github issues blog</code>的与<code>hexo blog</code>文章的映射，和关联gitment的关键</li><li>是<code>hexo blog</code>文章的文件名，也是URL中文件名部分的内容</li></ul></li><li>通过github open api及相应的工程化手段将上述github issues自动转化、发布为hexo blog.</li></ol><p>为了实现上述设计，只需要实现两个约束即可</p><ol><li><code>github  issues  tag</code>规范 (tag前缀规范，定义了两种特殊的前缀）<ul><li><code>blog-${unique name}</code>, 即blog前缀，即<code>设计结构2</code>中的unique name</li><li><code>cat-${category name}</code>,即cat前缀，即<code>设计结构1</code>中关于分类的那一小点，因为要区分标签和分类，所以要加前缀</li><li><code>${tag name}</code>，无前缀时默认为博文的标签</li></ul></li><li>为了解决<code>设计结构3</code>中的工程化相关问题，封装了一个<code>issues-originated-hexo-blog</code>插件，简化此问题。</li></ol><p>约束1只要注意就可以了，约束2有一定的技术门槛，不过既然你能搞定hexo博客，那约束2自然不在话下。</p><h2 id="issues-originated-hexo-blog插件的部署"><a href="#issues-originated-hexo-blog插件的部署" class="headerlink" title="issues-originated-hexo-blog插件的部署"></a><code>issues-originated-hexo-blog</code>插件的部署</h2><p>首先我假定,</p><ul><li>你独立能够搭建hexo静态站点</li><li>并且了解如何将此hexo站点发布到github gh-pages中</li><li>并且了解如何在hexo中使用gitment评论插件</li></ul><p>在此基础之上，</p><h3 id="I-先安装issues-originated-hexo-blog插件"><a href="#I-先安装issues-originated-hexo-blog插件" class="headerlink" title="I. 先安装issues-originated-hexo-blog插件"></a>I. 先安装<code>issues-originated-hexo-blog</code>插件</h3><p>在hexo工程根目录中</p><blockquote><p>npm install –save issues-originated-hexo-blog</p></blockquote><p>备注：请保证node版本在<code>v8.9</code>及以上</p><p>然后配置 <code>package.json</code>的 script部分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">         <span class="attr">"deploy"</span>: <span class="string">"issues-originated-hexo-blog https://api.github.com/repos/johnnychen/blog"</span>,</span><br><span class="line">         <span class="attr">"postdeploy"</span>: <span class="string">"git add . &amp;&amp; git commit -m 'update posts' &amp;&amp; git push -u origin master &amp;&amp; hexo d -g"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="II-将gitment的配置文件初始化代码部分改为"><a href="#II-将gitment的配置文件初始化代码部分改为" class="headerlink" title="II.将gitment的配置文件初始化代码部分改为"></a>II.将<code>gitment</code>的配置文件初始化代码部分改为</h3><p>由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">  id: <span class="string">'Your page ID'</span>, <span class="comment">// optional</span></span><br><span class="line">  owner: <span class="string">'Your GitHub ID'</span>,</span><br><span class="line">  repo: <span class="string">'The repo to store comments'</span>,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: <span class="string">'Your client ID'</span>,</span><br><span class="line">    client_secret: <span class="string">'Your client secret'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// For more available options, check out the documentation below</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCommentId</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> path = <span class="built_in">window</span>.location.pathname;</span><br><span class="line">  <span class="keyword">if</span>(path[path.length - <span class="number">1</span>] === <span class="string">'/'</span>)&#123;</span><br><span class="line">    path =  path.substr(<span class="number">0</span>, path.length <span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  path =  <span class="string">'blog-'</span> + path.split(<span class="string">'/'</span>).pop();</span><br><span class="line">  <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">  id: getCommentId(), <span class="comment">// optional</span></span><br><span class="line">  owner: <span class="string">'Your GitHub ID'</span>,</span><br><span class="line">  repo: <span class="string">'The repo to store comments'</span>,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: <span class="string">'Your client ID'</span>,</span><br><span class="line">    client_secret: <span class="string">'Your client secret'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// For more available options, check out the documentation below</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>核心是<code>getCommentId()</code>，gitment初始化的其余部分略去</p><h3 id="III-最后，运行一条命令即可"><a href="#III-最后，运行一条命令即可" class="headerlink" title="III. 最后，运行一条命令即可"></a>III. 最后，运行一条命令即可</h3><p>上述两个步骤完成后，想同步<code>github issues blog</code>的内容时，只需要运行</p><blockquote><p>npm run deploy</p></blockquote><p>即可</p><h2 id="关于hexo-blog的说明"><a href="#关于hexo-blog的说明" class="headerlink" title="关于hexo blog的说明"></a>关于hexo blog的说明</h2><p>在<code>issues-originated-hexo-blog</code>插件情况下的hexo blog依旧可以单独维护一些hexo blog独有的页面，比如About me. 不过请注意一个点：</p><blockquote><p>运行<code>issues-originated-hexo-blog</code>插件时，插件会以 github issues中<code>blog-${unique name}</code>的tag里的unique name作为文件名，即<code>{unique name}.md</code>保存到<code>/source/_posts</code>目录下</p></blockquote><p>所以，只要保证在hexo blog中维护的页面文件名不要有冲突即可</p><h2 id="真实Demo"><a href="#真实Demo" class="headerlink" title="真实Demo"></a>真实Demo</h2><p>可以参见本博客：</p><ul><li><code>github issues blog</code>: <a href="https://github.com/johnnychen/blog/issues/" target="_blank" rel="noopener">https://github.com/johnnychen/blog/issues/</a></li><li><code>hexo blog</code>: <a href="http://johnnychen.cc">http://johnnychen.cc</a></li><li><code>hexo 源码及工程目录</code>: <a href="https://github.com/johnnychen/blog" target="_blank" rel="noopener">https://github.com/johnnychen/blog</a></li></ul><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>关于约束2，即手动运行<code>npm run  deploy</code>部署、同步hexo blog的过程可以想方设法实现自动化。</p><p>想过<code>travis</code>, 不过travis只支持源码的push及MR事件，无法捕获issues相关事件。可以通过web hook达到效果，但需要一个在线编译环境，比如自己的vps，但增加了复杂度。</p><p>自己设想，是否可以通过webhook通过某种机制间接触发<code>travis</code>呢？</p><p>另外，如果实现了github issues blog和hexo blog的同步，是否更进一步让博文也同步发布到<code>知乎专栏</code>及<code>简书</code>等平台呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何抹平&lt;code&gt;github issues blog&lt;/code&gt;和&lt;code&gt;hexo blog&lt;/code&gt;的鸿沟呢？指的是既可以拥有自定义的hexo博客，又可以享用github issues的便捷性，且尽可能的只维护其中一份即可。&lt;/p&gt;
&lt;p&gt;自己分别研究了这两
      
    
    </summary>
    
      <category term="tools" scheme="http://johnnychen.cc/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>nodejs中的调试</title>
    <link href="http://johnnychen.cc//blog/2017/debug-nodejs/"/>
    <id>http://johnnychen.cc//blog/2017/debug-nodejs/</id>
    <published>2017-11-26T03:18:12.000Z</published>
    <updated>2017-12-10T06:33:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>node如何断点调试？运行时？多进程时？</p><blockquote><p><a href="https://nodejs.org/api/debugger.html" target="_blank" rel="noopener">https://nodejs.org/api/debugger.html</a></p></blockquote><p>请先阅读完上述官方关于debug的文档。</p><h2 id="官方的两种方式"><a href="#官方的两种方式" class="headerlink" title="官方的两种方式"></a>官方的两种方式</h2><p>官方文档中主要介绍了两种启用方式</p><ul><li><code>--debug</code> 方式启用调试，命令行（已经废弃）</li><li><code>--inspect</code> 方式启用调试，界面化</li></ul><h3 id="方式一：-debug"><a href="#方式一：-debug" class="headerlink" title="方式一：--debug"></a>方式一：<code>--debug</code></h3><h4 id="官方方案"><a href="#官方方案" class="headerlink" title="官方方案"></a>官方方案</h4><p>方法：<code>node --debug app.js</code></p><p><code>--debug</code>是node提供的最基本方式，启动后会默认开启<code>5858</code>端口，然后就可以侦听该端口进行调试了。尝试访问下5858提供的侦听端口服务把：<a href="http://localhost:5858" target="_blank" rel="noopener">http://localhost:5858</a></p><p>之后，侦听该端口，进行调试，方式及工具很多，官方只提供了命令行方式，</p><ul><li><code>node debug -p &lt;pid&gt;</code> 或</li><li><code>node debug &lt;URI&gt;</code></li></ul><p>备注：</p><blockquote><p>node debug index.js 其实是两条命令的缩写</p><ul><li>node –debug app.js // 假设其pid为10010</li><li>node debug -p 10010</li></ul></blockquote><p>这里不细讲，重点讲基于该端口的社区方案：</p><h4 id="社区扩展"><a href="#社区扩展" class="headerlink" title="社区扩展"></a>社区扩展</h4><p>社区提供了很多其他选择，列下比较知名的两个：</p><ul><li><a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="noopener">node-inspector</a></li><li><a href="http://s-a.github.io/iron-node/" target="_blank" rel="noopener">iron-node</a></li></ul><p>这里重点介绍下<code>node-inspector</code></p><p>安装很简单：<code>npm install -g node-inspector</code></p><p>使用也非常简单：<code>node-debug app.js</code></p><p>但，<code>node-debug app.js</code>其实包含了三个过程</p><ol><li><code>node-inspector</code> 启动8080web服务，访问后是一个CHROME_DEV_TOOLS界面</li><li><code>node --debug app.js</code>这个是最基本、核心的，启用node的<code>--debug</code>模式，暴露默认5858端口。</li><li>访问<code>http://127.0.0.1:8080/?port=5858</code>即可进行调试，node-inspector会通过socket与5858建立长连接，进行调试。</li></ol><p>总结一下前两者：</p><p><img src="https://cloud.githubusercontent.com/assets/1297278/23822659/2d9ae982-068c-11e7-9ac5-6bfaa7d3aab2.png" alt="image"></p><h3 id="方式二：-inspect"><a href="#方式二：-inspect" class="headerlink" title="方式二：--inspect"></a>方式二：<code>--inspect</code></h3><p>方法：<code>node --inspect app.js</code></p><p>其实是把社区的方案直接内置到nodejs中了，不需要安装<code>node-inspector</code>即可以直接用Chrome DevTools进行可视化界面调试。</p><p>此方案直到nodejs v6.3才被node内部支持，具体纳入过程可以参见：<a href="https://nodesource.com/blog/the-10-key-features-in-node-js-v6-lts-boron-after-you-upgrade" target="_blank" rel="noopener">https://nodesource.com/blog/the-10-key-features-in-node-js-v6-lts-boron-after-you-upgrade</a></p><p>纳入后的调用及部署变得简单，对比如下：</p><p><img src="https://cloud.githubusercontent.com/assets/1297278/23822666/58f71f42-068c-11e7-89d8-8cbbf5f0a071.png" alt="image"></p><h2 id="IDE中如何debug"><a href="#IDE中如何debug" class="headerlink" title="IDE中如何debug"></a>IDE中如何debug</h2><p>Debug原理就是上述两种方式，IDE中的内置debug也遵从</p><h3 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h3><p>采用<code>方式一</code>进行, 只要配置好<code>启动/入口JS</code>文件即可：</p><p><img src="https://cloud.githubusercontent.com/assets/1297278/23823075/426703d8-0695-11e7-9f94-1dcca56d8caf.png" alt="image"></p><p>Webstorm有两个button, 分别为启动和调试</p><ul><li>启动：用配置的 node <code>启动/入口JS</code></li><li>调试：额外加上调试参数 node <code>启动/入口JS</code> <code>--debug-brk=55077</code> <code>--expose_debug_as=v8debug</code></li></ul><p>由于IDE的高度集成，使得调试体验非常好：</p><p><img src="https://cloud.githubusercontent.com/assets/1297278/23823065/26d92128-0695-11e7-9a00-02df3967c9fd.png" alt="image"></p><h3 id="VisualStudioCode"><a href="#VisualStudioCode" class="headerlink" title="VisualStudioCode"></a>VisualStudioCode</h3><p><img src="https://user-images.githubusercontent.com/1297278/33805811-9b0c19f6-ddf9-11e7-83e1-7d87232eac11.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/1297278/33805819-a90dd724-ddf9-11e7-94f3-bea572f2997b.png" alt="image"></p><p>由于VS运行node环境为v8.9, 所以直接启用方式二进行debug: <code>node --inspect-brk=25696 test.js</code></p><h2 id="关于运行时调试"><a href="#关于运行时调试" class="headerlink" title="关于运行时调试"></a>关于运行时调试</h2><p>已经启动的服务器不想停掉，有办法进行调试吗？</p><ul><li><code>--debug</code>方式有, 对具体node进程传入<code>USR1</code>信号即可： <code>kill -s USR1 &lt;pid&gt;</code></li><li><code>--inspect</code>方式缺乏，有望在node v8.0提供，参见：<a href="https://github.com/nodejs/node/issues/8464" target="_blank" rel="noopener">Debug already running process using v8-inspector?</a></li></ul><p><img src="https://cloud.githubusercontent.com/assets/1297278/23822717/80ff748e-068d-11e7-868c-473c481a2a6f.png" alt="image"></p><h2 id="关于多进程"><a href="#关于多进程" class="headerlink" title="关于多进程"></a>关于多进程</h2><p><code>--inspect</code>方式不会有问题（缺点不提了），因为会对每个进程单独开启一个debug链接，但传统<code>--debug</code>就麻烦了。</p><hr><p>只有一条：请尽可能降维为单进程后再调试。当然，多进程Debug是有方法的，只不过比较麻烦，可以参见：</p><blockquote><p><a href="https://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/" target="_blank" rel="noopener">https://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/</a></p></blockquote><p>另外，针对eggjs，如何进行调试呢？因为即使开发模式，egg也会启动主进程、worker进程及agent 3个进程。比较简单，找出woker进程的pid，运行时设置为<code>--debug</code>模式。其他多进程也可以按照这种方式手动设置后debug。</p><blockquote><p>ps -ef | grep app_worker.js // 找到pid<br>kill -s USR1 [pid]</p></blockquote><p>然后便可以开启<code>node-inspector</code>，在浏览器中Debug了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>界面化调试偶尔用用即可，不要过于依赖，养成打印日志，通过日志定位、排查问题才是王道。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;node如何断点调试？运行时？多进程时？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/api/debugger.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org
      
    
    </summary>
    
      <category term="tools" scheme="http://johnnychen.cc/categories/tools/"/>
    
    
      <category term="nodejs" scheme="http://johnnychen.cc/tags/nodejs/"/>
    
  </entry>
  
</feed>
