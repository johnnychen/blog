<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Johnny&#39;s Blog</title>
  
  <subtitle>World is open for you to enjoy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://johnnychen.cc/"/>
  <updated>2017-11-30T05:39:51.000Z</updated>
  <id>http://johnnychen.cc/</id>
  
  <author>
    <name>始信</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to eliminate the gap between github issues blog and hexo blog</title>
    <link href="http://johnnychen.cc//blog/2017/issues-originated-hexo-blog/"/>
    <id>http://johnnychen.cc//blog/2017/issues-originated-hexo-blog/</id>
    <published>2017-11-26T07:55:13.000Z</published>
    <updated>2017-11-30T05:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何抹平<code>github issues blog</code>和<code>hexo blog</code>的鸿沟呢？指的是既可以拥有自定义的hexo博客，又可以享用github issues的便捷性，且尽可能的只维护其中一份即可。</p><p>自己分别研究了这两种博客机制，并结合gitment插件，设计了以github issues为源且兼顾hexo的一种博客维护方法（暂且叫<code>issues-originated-hexo-blog</code>），最后得到的效果：</p><blockquote><ul><li>只需要维护github issues即可</li><li>提供一种机制，让issues会自动编译并发布到hexo博客中</li><li>hexo可以享用github issues的评论，包括可以在hexo中评论，回源到github issues</li></ul></blockquote><p>一旦建立此机制后，你的日常blog维护方法只需要在维护github issues的基础之上满足两个约束即可：</p><ul><li>github issue的标签的前缀规范，用于定义博文的标签、分类的同时又可以关联两个博客的文章</li><li>手动执行一下命令<code>npm run deploy</code>，让issues的博客发布、同步到hexo中</li></ul><h2 id="关于两种blog和gitment插件"><a href="#关于两种blog和gitment插件" class="headerlink" title="关于两种blog和gitment插件"></a>关于两种blog和gitment插件</h2><p><code>github issues blog</code>和<code>hexo blog</code>都不细说了，github issues没有任何技术门门槛，hexo还是要研究实践一番才可以，但只要花点时间学习，还是很简单的，可以参见：<a href="http://www.jianshu.com/p/834d7cc0668d" target="_blank" rel="noopener">我的博客是如何搭建的（github pages + HEXO + 域名绑定）</a>。</p><p>其中，我们这里的<code>hexo blog</code>在部署环节特指通过github pages的方式，主要是既简单又使用。</p><p>另外，gitment插件是一个基于github issues,利用github 开放apis设计的一款创意第三方评论系统。既然可以把issue评论作为评论系统，那为何不更近一步，把issue本身当成博客呢？这是<code>issues-originated-hexo-blog</code>的核心理念。</p><h2 id="设计结构"><a href="#设计结构" class="headerlink" title="设计结构"></a>设计结构</h2><ol><li><code>issue本身</code>作为博文主体(包括标题和内容), <code>issue评论</code>作为博文评论，通过<code>github issues tags</code>作为博文的标签和分类</li><li>通过一个特殊的<code>github issue tag</code>来标识博文的<code>unique name</code>，此name两个作用<ul><li>是<code>github issues blog</code>的与<code>hexo blog</code>文章的映射，和关联gitment的关键</li><li>是<code>hexo blog</code>文章的文件名，也是URL中文件名部分的内容</li></ul></li><li>通过github open api及相应的工程化手段将上述github issues自动转化、发布为hexo blog.</li></ol><p>为了实现上述设计，只需要实现两个约束即可</p><ol><li><code>github  issues  tag</code>规范 (tag前缀规范，定义了两种特殊的前缀）<ul><li><code>blog-${unique name}</code>, 即blog前缀，即<code>设计结构2</code>中的unique name</li><li><code>cat-${category name}</code>,即cat前缀，即<code>设计结构1</code>中关于分类的那一小点，因为要区分标签和分类，所以要加前缀</li><li><code>${tag name}</code>，无前缀时默认为博文的标签</li></ul></li><li>为了解决<code>设计结构3</code>中的工程化相关问题，封装了一个<code>issues-originated-hexo-blog</code>插件，简化此问题。</li></ol><p>约束1只要注意就可以了，约束2有一定的技术门槛，不过既然你能搞定hexo博客，那约束2自然不在话下。</p><h2 id="issues-originated-hexo-blog插件的部署"><a href="#issues-originated-hexo-blog插件的部署" class="headerlink" title="issues-originated-hexo-blog插件的部署"></a><code>issues-originated-hexo-blog</code>插件的部署</h2><p>首先我假定,</p><ul><li>你独立能够搭建hexo静态站点</li><li>并且了解如何将此hexo站点发布到github gh-pages中</li><li>并且了解如何在hexo中使用gitment评论插件</li></ul><p>在此基础之上，</p><h3 id="I-先安装issues-originated-hexo-blog插件"><a href="#I-先安装issues-originated-hexo-blog插件" class="headerlink" title="I. 先安装issues-originated-hexo-blog插件"></a>I. 先安装<code>issues-originated-hexo-blog</code>插件</h3><p>在hexo工程根目录中</p><blockquote><p>npm install –save issues-originated-hexo-blog</p></blockquote><p>备注：请保证node版本在<code>v8.9</code>及以上</p><p>然后配置 <code>package.json</code>的 script部分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">         <span class="attr">"deploy"</span>: <span class="string">"issues-originated-hexo-blog https://api.github.com/repos/johnnychen/blog"</span>,</span><br><span class="line">         <span class="attr">"postdeploy"</span>: <span class="string">"git add . &amp;&amp; git commit -m 'update posts' &amp;&amp; git push -u origin master &amp;&amp; hexo d -g"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="II-将gitment的配置文件初始化代码部分改为"><a href="#II-将gitment的配置文件初始化代码部分改为" class="headerlink" title="II.将gitment的配置文件初始化代码部分改为"></a>II.将<code>gitment</code>的配置文件初始化代码部分改为</h3><p>由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">  id: <span class="string">'Your page ID'</span>, <span class="comment">// optional</span></span><br><span class="line">  owner: <span class="string">'Your GitHub ID'</span>,</span><br><span class="line">  repo: <span class="string">'The repo to store comments'</span>,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: <span class="string">'Your client ID'</span>,</span><br><span class="line">    client_secret: <span class="string">'Your client secret'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// For more available options, check out the documentation below</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCommentId</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> path = <span class="built_in">window</span>.location.pathname;</span><br><span class="line">  <span class="keyword">if</span>(path[path.length - <span class="number">1</span>] === <span class="string">'/'</span>)&#123;</span><br><span class="line">    path =  path.substr(<span class="number">0</span>, path.length <span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  path =  <span class="string">'blog-'</span> + path.split(<span class="string">'/'</span>).pop();</span><br><span class="line">  <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">  id: getCommentId(), <span class="comment">// optional</span></span><br><span class="line">  owner: <span class="string">'Your GitHub ID'</span>,</span><br><span class="line">  repo: <span class="string">'The repo to store comments'</span>,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: <span class="string">'Your client ID'</span>,</span><br><span class="line">    client_secret: <span class="string">'Your client secret'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// For more available options, check out the documentation below</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>核心是<code>getCommentId()</code>，gitment初始化的其余部分略去</p><h3 id="III-最后，运行一条命令即可"><a href="#III-最后，运行一条命令即可" class="headerlink" title="III. 最后，运行一条命令即可"></a>III. 最后，运行一条命令即可</h3><p>上述两个步骤完成后，想同步<code>github issues blog</code>的内容时，只需要运行</p><blockquote><p>npm run deploy</p></blockquote><p>即可</p><h2 id="关于hexo-blog的说明"><a href="#关于hexo-blog的说明" class="headerlink" title="关于hexo blog的说明"></a>关于hexo blog的说明</h2><p>在<code>issues-originated-hexo-blog</code>插件情况下的hexo blog依旧可以单独维护一些hexo blog独有的页面，比如About me. 不过请注意一个点：</p><blockquote><p>运行<code>issues-originated-hexo-blog</code>插件时，插件会以 github issues中<code>blog-${unique name}</code>的tag里的unique name作为文件名，即<code>{unique name}.md</code>保存到<code>/source/_posts</code>目录下</p></blockquote><p>所以，只要保证在hexo blog中维护的页面文件名不要有冲突即可</p><h2 id="真实Demo"><a href="#真实Demo" class="headerlink" title="真实Demo"></a>真实Demo</h2><p>可以参见本博客：</p><ul><li><code>github issues blog</code>: <a href="https://github.com/johnnychen/blog/issues/" target="_blank" rel="noopener">https://github.com/johnnychen/blog/issues/</a></li><li><code>hexo blog</code>: <a href="http://johnnychen.cc">http://johnnychen.cc</a></li><li><code>hexo 源码及工程目录</code>: <a href="https://github.com/johnnychen/blog" target="_blank" rel="noopener">https://github.com/johnnychen/blog</a></li></ul><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>关于约束2，即手动运行<code>npm run  deploy</code>部署、同步hexo blog的过程可以想方设法实现自动化。</p><p>想过<code>travis</code>, 不过travis只支持源码的push及MR事件，无法捕获issues相关事件。可以通过web hook达到效果，但需要一个在线编译环境，比如自己的vps，但增加了复杂度。</p><p>自己设想，是否可以通过webhook通过某种机制间接触发<code>travis</code>呢？</p><p>另外，如果实现了github issues blog和hexo blog的同步，是否更进一步让博文也同步发布到<code>知乎专栏</code>及<code>简书</code>等平台呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何抹平&lt;code&gt;github issues blog&lt;/code&gt;和&lt;code&gt;hexo blog&lt;/code&gt;的鸿沟呢？指的是既可以拥有自定义的hexo博客，又可以享用github issues的便捷性，且尽可能的只维护其中一份即可。&lt;/p&gt;
&lt;p&gt;自己分别研究了这两
      
    
    </summary>
    
      <category term="tools" scheme="http://johnnychen.cc/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>How to debug node line by line</title>
    <link href="http://johnnychen.cc//blog/2017/debug-nodejs/"/>
    <id>http://johnnychen.cc//blog/2017/debug-nodejs/</id>
    <published>2017-11-26T03:18:12.000Z</published>
    <updated>2017-11-26T06:36:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>node如何断点调试？运行时？多进程时？</p><blockquote><p><a href="https://nodejs.org/api/debugger.html" target="_blank" rel="noopener">https://nodejs.org/api/debugger.html</a></p></blockquote><p>请先阅读完上述官方调试章节的api文档。文档中主要介绍了两种启用方式</p><ul><li><code>--debug</code> 方式启用调试，命令行</li><li><code>--inspect</code> 方式启用调试，界面化</li></ul><h2 id="方式一：debug"><a href="#方式一：debug" class="headerlink" title="方式一：debug"></a>方式一：debug</h2><h4 id="官方方案"><a href="#官方方案" class="headerlink" title="官方方案"></a>官方方案</h4><p>方法：<code>node --debug app.js</code></p><p><code>--debug</code>是node提供的最基本方式，启动后会默认开启<code>5858</code>端口，然后就可以侦听该端口进行调试了。尝试访问下5858提供的侦听端口服务把：<a href="http://localhost:5858" target="_blank" rel="noopener">http://localhost:5858</a></p><p>之后，侦听该端口，进行调试，方式及工具很多，官方只提供了命令行方式，</p><ul><li><code>node debug -p &lt;pid&gt;</code> 或</li><li><code>node debug &lt;URI&gt;</code></li></ul><p>备注：</p><blockquote><p>node debug index.js 其实是两条命令的缩写</p><ul><li>node –debug app.js // 假设其pid为10010</li><li>node debug -p 10010</li></ul></blockquote><p>这里不细讲，重点讲基于该端口的社区方案：</p><h3 id="社区扩展"><a href="#社区扩展" class="headerlink" title="社区扩展"></a>社区扩展</h3><p>社区提供了很多其他选择，列下比较知名的两个：</p><ul><li><a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="noopener">node-inspector</a></li><li><a href="http://s-a.github.io/iron-node/" target="_blank" rel="noopener">iron-node</a></li></ul><p>这里重点介绍下<code>node-inspector</code></p><p>安装很简单：<code>npm install -g node-inspector</code></p><p>使用也非常简单：<code>node-debug app.js</code></p><p>但，<code>node-debug app.js</code>其实包含了三个过程</p><ol><li><code>node-inspector</code> 启动8080web服务，访问后是一个CHROME_DEV_TOOLS界面</li><li><code>node --debug app.js</code>这个是最基本、核心的，启用node的<code>--debug</code>模式，暴露默认5858端口。</li><li>访问<code>http://127.0.0.1:8080/?port=5858</code>即可进行调试，node-inspector会通过socket与5858建立长连接，进行调试。</li></ol><p>总结一下前两者：</p><p><img src="https://cloud.githubusercontent.com/assets/1297278/23822659/2d9ae982-068c-11e7-9ac5-6bfaa7d3aab2.png" alt="image"></p><h2 id="方式二：inspect"><a href="#方式二：inspect" class="headerlink" title="方式二：inspect"></a>方式二：inspect</h2><p>方法：<code>node --inspect app.js</code></p><p>其实是把社区的方案直接内置到nodejs中了，不需要安装<code>node-inspector</code>即可以直接用Chrome DevTools进行可视化界面调试。</p><p>此方案直到nodejs v6.3才被node内部支持，具体纳入过程可以参见：<a href="https://nodesource.com/blog/the-10-key-features-in-node-js-v6-lts-boron-after-you-upgrade" target="_blank" rel="noopener">https://nodesource.com/blog/the-10-key-features-in-node-js-v6-lts-boron-after-you-upgrade</a></p><p>纳入后的调用及部署变得简单，对比如下：</p><p><img src="https://cloud.githubusercontent.com/assets/1297278/23822666/58f71f42-068c-11e7-89d8-8cbbf5f0a071.png" alt="image"></p><h2 id="通过IDE进行debug"><a href="#通过IDE进行debug" class="headerlink" title="通过IDE进行debug"></a>通过IDE进行debug</h2><p>debug原理就是上述两种，一些IDE如Webstorm的内置的debug调试也是基于上述原理，采用<code>方式一</code>进行, 只要配置好<code>启动/入口JS</code>文件即可：</p><p><img src="https://cloud.githubusercontent.com/assets/1297278/23823075/426703d8-0695-11e7-9f94-1dcca56d8caf.png" alt="image"></p><p>Webstorm有两个button, 分别为启动和调试</p><ul><li>启动：用配置的 node <code>启动/入口JS</code></li><li>调试：额外加上调试参数 node <code>启动/入口JS</code> <code>--debug-brk=55077</code> <code>--expose_debug_as=v8debug</code></li></ul><p>由于IDE的高度集成，使得调试体验非常好：</p><p><img src="https://cloud.githubusercontent.com/assets/1297278/23823065/26d92128-0695-11e7-9a00-02df3967c9fd.png" alt="image"></p><h2 id="关于运行时调试"><a href="#关于运行时调试" class="headerlink" title="关于运行时调试"></a>关于运行时调试</h2><p>已经启动的服务器不想停掉，有办法进行调试吗？</p><ul><li><code>--debug</code>方式有, 对具体node进程传入<code>USR1</code>信号即可： <code>kill -s USR1 &lt;pid&gt;</code></li><li><code>--inspect</code>方式缺乏，有望在node v8.0提供，参见：<a href="https://github.com/nodejs/node/issues/8464" target="_blank" rel="noopener">Debug already running process using v8-inspector?</a></li></ul><p><img src="https://cloud.githubusercontent.com/assets/1297278/23822717/80ff748e-068d-11e7-868c-473c481a2a6f.png" alt="image"></p><h2 id="关于多进程"><a href="#关于多进程" class="headerlink" title="关于多进程"></a>关于多进程</h2><p><code>--inspect</code>方式不会有问题（缺点不提了），因为会对每个进程单独开启一个debug链接，但传统<code>--debug</code>就麻烦了。</p><hr><p>只有一条：请尽可能降维为单进程后再调试。当然，多进程Debug是有方法的，只不过比较麻烦，可以参见：</p><blockquote><p><a href="https://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/" target="_blank" rel="noopener">https://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/</a></p></blockquote><p>另外，针对eggjs，如何进行调试呢？因为即使开发模式，egg也会启动主进程、worker进程及agent 3个进程。比较简单，找出woker进程的pid，运行时设置为<code>--debug</code>模式。其他多进程也可以按照这种方式手动设置后debug。</p><blockquote><p>ps -ef | grep app_worker.js // 找到pid<br>kill -s USR1 [pid]</p></blockquote><p>然后便可以开启<code>node-inspector</code>，在浏览器中Debug了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>界面化调试偶尔用用即可，不要过于依赖，养成打印日志，通过日志定位、排查问题才是王道。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;node如何断点调试？运行时？多进程时？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/api/debugger.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org
      
    
    </summary>
    
      <category term="tools" scheme="http://johnnychen.cc/categories/tools/"/>
    
    
      <category term="nodejs" scheme="http://johnnychen.cc/tags/nodejs/"/>
    
  </entry>
  
</feed>
